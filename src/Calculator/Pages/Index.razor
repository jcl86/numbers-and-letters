@page "/"
@inject IGamePreparer gamePreparer;



    <div class="container">

        <div class="d-flex align-items-end justify-content-between">

            <ObjetivePanel Objective="game.Objetive"></ObjetivePanel>

            @if (game.IsStarted)
            {
                <div class="bg-light d-flex justify-content-start">
                    <button @onclick="() => game.RestartGame()" class="btn btn-outline-secondary">
                        <span class="mr-2"><i class="fas fa-redo-alt"></i></span>Begin again
                    </button>
                </div>
            }

            <CurrentCalculation Calculation="game.CurrentCalculation"></CurrentCalculation>

        </div>

        <br />

        <NumbersGrid Numbers="game.Numbers" OnNumberClicked="NumberClicked"></NumbersGrid>

        <br />

        <OperationsGrid OperationSelected="OnOperationClicked"></OperationsGrid>

        <AchievementMessage Message="game.Message"></AchievementMessage>

        <div class="card border-0">
            <img src="img/background-small.png" class="card-img" alt="...">
            <div class="card-img-overlay">
                <br /> 
                <br />
                <br />
                <br />
                <div class="row mt-5">
                    <div class="col-6">
                        <ResultsGrid OnNumberClicked="CalculatedNumberClicked" Numbers="game.CalculatedNumbers"></ResultsGrid>
                    </div>
                    <div class="col-6">
                        <CalculationList List="game.CalculationList"></CalculationList>
                    </div>
                </div>
            </div>
        </div>

    </div>


@code
{
    private Game game;

    protected override void OnInitialized()
    {
        game = new Game(gamePreparer);
    }

    private void OnOperationClicked(Operator @operator)
    {
        if (!game.CurrentCalculation.IsFilled)
        {
            game.CurrentCalculation.SetOperator(@operator);
            game.Resolve();
        }
    }

    private void NumberClicked(Number number)
    {
        if (!game.CurrentCalculation.IsFilled)
        {
            game.CurrentCalculation.SetNumber(number);
            game.Resolve();
        }
    }

    private void CalculatedNumberClicked(Calculator.CalculatedNumber number)
    {
        if (!game.CurrentCalculation.IsFilled)
        {
            game.CurrentCalculation.SetNumber(number);
            game.Resolve();
        }
    }
}