@inject IWordSearcher wordSearcher

<div class="d-flex justify-content-center">
    <div class="input-group input-group-lg" style="max-width:40em;">
        <input type="text" class="form-control"
               @onchange="OnTextChanged"
               aria-label="Type your word"
               aria-describedby="input-word-state"
               placeholder="Type your word">

        <div class="input-group-append">
            <span class="input-group-text" id="input-word-state">
                <i class="@icon"></i>
            </span>
        </div>
    </div>
</div>
<div class="d-flex justify-content-center">
    <span class="text-danger">@error</span>
</div>
@code {

    private string error;

    private string typedWord;

    private const string successIcon = "fas fa-check";
    private const string failIcon = "fas fa-times";
    private const string loadingIcon = "fas fa-spinner";

    private string icon;

    [Parameter]
    public AvaliableLetters AvaliableLetters { get; set; }

    private async Task OnTextChanged(ChangeEventArgs args)
    {
        if (args.Value.ToString().Equals(typedWord ?? ""))
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            error = "";
            return;
        }

        error = "";
        icon = loadingIcon;
        typedWord = args.Value.ToString();

        bool wordMatches = AvaliableLetters.FormWord(typedWord);
        await OnInputChanged.InvokeAsync(typedWord);

        if (wordMatches)
        {
            var word = await wordSearcher.Search(typedWord);
            if (word != null)
            {
                icon = successIcon;
                await OnWordFound.InvokeAsync(word);
                return;
            }
            else error = $"{typedWord} was not found in the dictionary";
        }
        else error = $"{typedWord} can not be formed with current letters";
        icon = failIcon;
    }

    [Parameter]
    public EventCallback<DictionaryWord> OnWordFound { get; set; }

    [Parameter]
    public EventCallback<string> OnInputChanged { get; set; }
}
